#include <ModbusMaster.h>

// Define the Modbus slave address for the OXY-DO Digital Sensor
#define SLAVE_ADDRESS 1

// Create a ModbusMaster object
ModbusMaster node;

void setup() {
  // Start the serial communication for ESP32
  Serial.begin(9600);
  
  // Start the serial communication for RS485 (Serial2)
  Serial2.begin(9600, SERIAL_8N1, 17, 16);  // RX pin: GPIO16, TX pin: GPIO17

  // Configure the Modbus communication
  node.begin(SLAVE_ADDRESS, Serial2);
}

void loop() {
  // Read DO value and temperature value
  float doValue, temperatureValue;
  if (readDOAndTemperature(doValue, temperatureValue)) {
    // Print the values
    Serial.print("DO Value: ");
    Serial.println(doValue, 3);

    Serial.print("Temperature Value: ");
    Serial.println(temperatureValue, 2);
  }

  delay(1000);
}

bool readDOAndTemperature(float& doValue, float& temperatureValue) {
  // Read the holding registers from the sensor
  uint16_t data[2];
  uint8_t result = node.readHoldingRegisters(0, 2);
  
  if (result == node.ku8MBSuccess) {
    // Extract the data from the registers
    doValue = (float)data[0] / 1000.0;
    temperatureValue = (float)data[1] / 100.0;

    return true;
  }
  else {
    Serial.print("Modbus Read Error: ");
    Serial.println(result);
    return false;
  }
}
